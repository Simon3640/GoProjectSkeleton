{
	"info": {
		"_postman_id": "182455d3-f7ec-431d-86ec-4e3bddef37a9",
		"name": "GormGoSkeletonE2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26233879"
	},
	"item": [
		{
			"name": "Base",
			"item": [
				{
					"name": "HealthCheck",
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept-Language",
								"value": "es-ES",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/health-check",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"health-check"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserAuth",
			"item": [
				{
					"name": "NewUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"// Check if the status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Extract and set user ID to environment variable",
									"pm.environment.set(\"userId\", response.data.id);",
									"",
									"// Validate the user ID exists and is of correct type",
									"pm.test(\"User ID is present and is a number\", function () {",
									"    pm.expect(response.data.id).to.exist;",
									"    pm.expect(response.data.id).to.be.a('number');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "es-ES",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"name\": \"new user\",\n  \"otp_login\": false,\n  \"password\": \"{{strongPassword}}\",\n  \"phone\": \"12345678901\",\n  \"role_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user-password",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMailPitMessage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get last message",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"status code\", function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"// Get token to activate user",
									"pm.environment.set(\"lastMessageID\", response.messages[0].ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{mailhogHost}}:8025/api/v1/messages?limit=1",
							"protocol": "http",
							"host": [
								"{{mailhogHost}}"
							],
							"port": "8025",
							"path": [
								"api",
								"v1",
								"messages"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMailPitActivationToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let match = response.Text.match(/token=([A-Za-z0-9\\-_]+)/);",
									"console.log(match);",
									"",
									"if (match && match[1]) {",
									"    pm.environment.set(\"activateUserToken\", match[1]);",
									"} else {",
									"    console.warn(\"Token not found in response Text.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{mailhogHost}}:8025/api/v1/message/{{lastMessageID}}",
							"protocol": "http",
							"host": [
								"{{mailhogHost}}"
							],
							"port": "8025",
							"path": [
								"api",
								"v1",
								"message",
								"{{lastMessageID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ActivateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: data and details\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('data', 'details');",
									"});",
									"",
									"",
									"pm.test(\"Data field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{activateUserToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/activate",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"activate"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()",
									"",
									"pm.test(\"Access Token is present\", function () {",
									"    pm.expect(response.data.access_token).to.not.be.null;",
									"});",
									"",
									"pm.test(\"Refresh Token is present\", function () {",
									"    pm.expect(response.data.refresh_token).to.not.be.null;",
									"});",
									"",
									"pm.environment.set(\"userToken\", response.data.access_token);",
									"pm.environment.set(\"refreshUserToken\", response.data.refresh_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "es-ES",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{strongPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "RefresToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"    pm.expect(responseData.data).to.have.all.keys('access_token', 'refresh_token', 'token_type', 'access_expires_at', 'refresh_expires_at');",
									"});",
									"",
									"",
									"pm.test(\"Access token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.access_token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Refresh token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data.refresh_token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh token should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "es-ES",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{refreshUserToken}}\""
						},
						"url": {
							"raw": "{{baseURL}}/auth/refresh",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"refresh"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserInfoID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body contains user data\", function () {",
									"    pm.expect(response.data).to.have.property(\"name\");",
									"    pm.expect(response.data).to.have.property(\"email\");",
									"    pm.expect(response.data).to.have.property(\"phone\");",
									"    pm.expect(response.data).to.have.property(\"status\");",
									"    pm.expect(response.data).to.have.property(\"role_id\");",
									"    pm.expect(response.data).to.have.property(\"otp_login\");",
									"    pm.expect(response.data).to.have.property(\"id\");",
									"    pm.expect(response.data).to.have.property(\"created_at\");",
									"    pm.expect(response.data).to.have.property(\"updated_at\");",
									"    pm.expect(response.data).to.have.property(\"deleted_at\");",
									"});",
									"",
									"//Same ID",
									"",
									"pm.test(\"Same Id\", function () {",
									"    pm.expect(response.data.id).to.equal(parseInt(pm.environment.get(\"userId\")));",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{userToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/user/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"User should be updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"// Test name has change",
									"",
									"pm.test(\"User name should be updated\", function () {",
									"    pm.expect(response.data.name).to.eql(\"Updated Name\");",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PasswordRestore",
			"item": [
				{
					"name": "PasswordReset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: data and details\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('data', 'details');",
									"});",
									"",
									"",
									"pm.test(\"Data field should be of boolean type\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Details field should be a string and can be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('details').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/auth/password-reset/{{userEmail}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"password-reset",
								"{{userEmail}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMailPitMessages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get last message",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"status code\", function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"// Get token to activate user",
									"pm.environment.set(\"lastMessageID\", response.messages[0].ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{mailhogHost}}:8025/api/v1/messages?limit=1",
							"protocol": "http",
							"host": [
								"{{mailhogHost}}"
							],
							"port": "8025",
							"path": [
								"api",
								"v1",
								"messages"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMailPitResetToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let match = response.Text.match(/token=([A-Za-z0-9\\-_]+)/);",
									"console.log(match);",
									"",
									"if (match && match[1]) {",
									"    pm.environment.set(\"passwordUserToken\", match[1]);",
									"} else {",
									"    console.warn(\"Token not found in response Text.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{mailhogHost}}:8025/api/v1/message/{{lastMessageID}}",
							"protocol": "http",
							"host": [
								"{{mailhogHost}}"
							],
							"port": "8025",
							"path": [
								"api",
								"v1",
								"message",
								"{{lastMessageID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PasswordResetToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: data and details\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('data', 'details');",
									"});",
									"",
									"",
									"pm.test(\"The data field must be a boolean\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"The details field must be a string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.details).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"no_hashed_password\": \"{{strongPassword}}\",\n  \"token\": \"{{passwordUserToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/password/reset-token",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"password",
								"reset-token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "OTPLogin",
			"item": [
				{
					"name": "UpdateUserOTPLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{userToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"otp_login\": true\n}"
						},
						"url": {
							"raw": "{{baseURL}}/user/{{userId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 204\", function () {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept-Language",
								"value": "es-ES",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{strongPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/auth/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMailPitMessages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get last message",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"status code\", function(){",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"// Get token to activate user",
									"pm.environment.set(\"lastMessageID\", response.messages[0].ID)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{mailhogHost}}:8025/api/v1/messages?limit=1",
							"protocol": "http",
							"host": [
								"{{mailhogHost}}"
							],
							"port": "8025",
							"path": [
								"api",
								"v1",
								"messages"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMailPitLoginOTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let match = response.Text.match(/\\b\\d{6}\\b/);",
									"console.log(match);",
									"",
									"if (match && match[0]) {",
									"    pm.environment.set(\"loginOTP\", match[0]);",
									"} else {",
									"    console.warn(\"Token not found in response Text.\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{mailhogHost}}:8025/api/v1/message/{{lastMessageID}}",
							"protocol": "http",
							"host": [
								"{{mailhogHost}}"
							],
							"port": "8025",
							"path": [
								"api",
								"v1",
								"message",
								"{{lastMessageID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginOTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    ",
									"    pm.expect(responseData.data).to.have.all.keys('access_token', 'refresh_token', 'token_type', 'access_expires_at', 'refresh_expires_at');",
									"});",
									"",
									"",
									"pm.test(\"Access token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.access_token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Token type must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.data.token_type).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Access and refresh expiration times are in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"    ",
									"    const accessExpiresAt = responseData.data.access_expires_at;",
									"    const refreshExpiresAt = responseData.data.refresh_expires_at;",
									"",
									"    const isValidDate = (dateString) => {",
									"        const date = new Date(dateString);",
									"        return !isNaN(date.getTime());",
									"    };",
									"",
									"    pm.expect(isValidDate(accessExpiresAt)).to.be.true;",
									"    pm.expect(isValidDate(refreshExpiresAt)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/auth/login-otp/{{loginOTP}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth",
								"login-otp",
								"{{loginOTP}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
