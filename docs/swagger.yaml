definitions:
  models.PasswordCreateNoHash:
    properties:
      expires_at:
        type: string
      is_active:
        type: boolean
      no_hashed_password:
        type: string
      user_id:
        type: integer
    type: object
  models.Token:
    properties:
      access_expires_at:
        type: string
      access_token:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.UserAndPasswordCreate:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
    type: object
  models.UserCreate:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
    type: object
  models.UserCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UserUpdateBase:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log in and receive JWT access and
        refresh tokens
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens generated successfully
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login and get JWT tokens
      tags:
      - Auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to refresh their JWT access token using
        a valid refresh
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh JWT access token
      tags:
      - Auth
  /api/health-check:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses: {}
      tags:
      - Health Check
  /api/password:
    post:
      consumes:
      - application/json
      description: This endpoint Create a new password
      parameters:
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PasswordCreateNoHash'
      produces:
      - application/json
      responses:
        "201":
          description: Usuario creado
          schema:
            type: boolean
        "400":
          description: Error de validaci贸n
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Create a new password
      tags:
      - Password
  /api/user:
    get:
      consumes:
      - application/json
      description: Retrieve all users with support for filtering, sorting, and pagination.
      parameters:
      - collectionFormat: csv
        description: Filter users in the format column:operator:value (e.g. Name:eq:Admin,
          Age:gt:18)
        in: query
        items:
          type: string
        name: filter
        type: array
      - collectionFormat: csv
        description: Sort users in the format column:asc|desc (e.g. Name:asc, CreatedAt:desc)
        in: query
        items:
          type: string
        name: sort
        type: array
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: This endpoint Create a new user
      parameters:
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Usuario creado
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error de validaci贸n
          schema:
            additionalProperties:
              type: string
            type: object
      summary: This endpoint Create a new user
      tags:
      - User
  /api/user-password:
    post:
      consumes:
      - application/json
      description: This endpoint Create a new user and password
      parameters:
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserAndPasswordCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Usuario creado
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error de validaci贸n
          schema:
            additionalProperties:
              type: string
            type: object
      summary: This endpoint Create a new user
      tags:
      - User
  /api/user/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint Delete a user by ID
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Usuario eliminado
        "404":
          description: Usuario no encontrado
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Delete a user by ID
      tags:
      - User
    get:
      consumes:
      - application/json
      description: This endpoint Get a user by ID
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Usuario
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Usuario no encontrado
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Get a user by ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: This endpoint Update a user by ID
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateBase'
      produces:
      - application/json
      responses:
        "200":
          description: Usuario actualizado
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error de validaci贸n
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Update a user by ID
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Bearer token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
