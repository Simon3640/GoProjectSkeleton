definitions:
  dtos.Link:
    properties:
      last:
        type: string
      next:
        type: string
      self:
        type: string
    type: object
  dtos.MetaMultiResponse:
    properties:
      count:
        type: integer
      has_next:
        type: boolean
      has_prev:
        type: boolean
      links:
        $ref: '#/definitions/dtos.Link'
      total:
        type: integer
    type: object
  dtos.PasswordCreateNoHash:
    properties:
      expires_at:
        type: string
      is_active:
        type: boolean
      no_hashed_password:
        type: string
      user_id:
        type: integer
    type: object
  dtos.PasswordTokenCreate:
    properties:
      no_hashed_password:
        type: string
      token:
        type: string
    type: object
  dtos.Token:
    properties:
      access_expires_at:
        type: string
      access_token:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  dtos.UserActivate:
    properties:
      token:
        type: string
    type: object
  dtos.UserAndPasswordCreate:
    properties:
      email:
        type: string
      name:
        type: string
      otp_login:
        type: boolean
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
    type: object
  dtos.UserCreate:
    properties:
      email:
        type: string
      name:
        type: string
      otp_login:
        type: boolean
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
    type: object
  dtos.UserCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dtos.UserMultiResponse:
    properties:
      meta:
        $ref: '#/definitions/dtos.MetaMultiResponse'
      records:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  dtos.UserUpdateBase:
    properties:
      email:
        type: string
      name:
        type: string
      otp_login:
        type: boolean
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      otp_login:
        type: boolean
      phone:
        type: string
      role_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log in and receive JWT access and
        refresh tokens
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserCredentials'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens generated successfully
          schema:
            $ref: '#/definitions/dtos.Token'
        "204":
          description: OTP login enabled, OTP Sended to user email or phone
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login and get JWT tokens
      tags:
      - Auth
  /api/auth/login-otp/{otp}:
    get:
      consumes:
      - application/json
      description: This endpoint allows a user to log in with OTP and receive JWT
        access and
      parameters:
      - description: One Time Password
        in: path
        name: otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tokens generated successfully
          schema:
            $ref: '#/definitions/dtos.Token'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login with OTP and get JWT tokens
      tags:
      - Auth
  /api/auth/password-reset/{identifier}:
    get:
      consumes:
      - application/json
      description: This endpoint allows a user to request a password reset. An email
        with a
      parameters:
      - description: Provided email or phone number
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Request password reset
      tags:
      - Auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to refresh their JWT access token using
        a valid refresh
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.Token'
        "400":
          description: Validation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh JWT access token
      tags:
      - Auth
  /api/health-check:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses: {}
      tags:
      - Health Check
  /api/password:
    post:
      consumes:
      - application/json
      description: This endpoint Create a new password
      parameters:
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.PasswordCreateNoHash'
      produces:
      - application/json
      responses:
        "201":
          description: Usuario creado
          schema:
            type: boolean
        "400":
          description: Error de validación
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Create a new password
      tags:
      - Password
  /api/password/reset-token:
    post:
      consumes:
      - application/json
      description: This endpoint Create a new password reset token
      parameters:
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.PasswordTokenCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Token creado
          schema:
            type: boolean
        "400":
          description: Error de validación
          schema:
            additionalProperties:
              type: string
            type: object
      summary: This endpoint Create a new password reset token
      tags:
      - Password
  /api/user:
    get:
      consumes:
      - application/json
      description: Retrieve all users with support for filtering, sorting, and pagination.
      parameters:
      - collectionFormat: csv
        description: Filter users in the format column:operator:value (e.g. Name:eq:Admin,
          Age:gt:18)
        in: query
        items:
          type: string
        name: filter
        type: array
      - collectionFormat: csv
        description: Sort users in the format column:asc|desc (e.g. Name:asc, CreatedAt:desc)
        in: query
        items:
          type: string
        name: sort
        type: array
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/dtos.UserMultiResponse'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: This endpoint Create a new user
      parameters:
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Usuario creado
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error de validación
          schema:
            additionalProperties:
              type: string
            type: object
      summary: This endpoint Create a new user
      tags:
      - User
  /api/user-password:
    post:
      consumes:
      - application/json
      description: This endpoint Create a new user and password
      parameters:
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserAndPasswordCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Usuario creado
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error de validación
          schema:
            additionalProperties:
              type: string
            type: object
      summary: This endpoint Create a new user
      tags:
      - User
  /api/user/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint Delete a user by ID
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Usuario eliminado
        "404":
          description: Usuario no encontrado
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Delete a user by ID
      tags:
      - User
    get:
      consumes:
      - application/json
      description: This endpoint Get a user by ID
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Usuario
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Usuario no encontrado
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Get a user by ID
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: This endpoint Update a user by ID
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      - description: Datos del usuario
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserUpdateBase'
      produces:
      - application/json
      responses:
        "200":
          description: Usuario actualizado
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Error de validación
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: This endpoint Update a user by ID
      tags:
      - User
  /api/user/activate:
    post:
      consumes:
      - application/json
      description: This endpoint Activate a user by token
      parameters:
      - description: Token de activación
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UserActivate'
      produces:
      - application/json
      responses:
        "200":
          description: Usuario activado
          schema:
            type: boolean
        "400":
          description: Error de validación
          schema:
            additionalProperties:
              type: string
            type: object
      summary: This endpoint Activate a user by token
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Bearer token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
